<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>テキオモの部屋</title>
    <link>https://tekiomo.com/</link>
    <description>Recent content on テキオモの部屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jan 2019 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://tekiomo.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://tekiomo.com/about/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/about/</guid>
      <description>主に使っているもの  Ubuntu Vim Zsh GNOME3  主に書いているもの  TypeScript JavaScript  たまに書いているもの  Go SCSS  ごくまれに書いているもの  PHP Python Shell Script  働いているところ ツキノワ株式会社</description>
    </item>
    
    <item>
      <title>洋画「キングダム」(2007)をAmazonプライムビデオで見た</title>
      <link>https://tekiomo.com/blog/2018/06/18/%E6%B4%8B%E7%94%BB%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%80%E3%83%A02007%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/06/18/%E6%B4%8B%E7%94%BB%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%80%E3%83%A02007%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</guid>
      <description>  映画「キングダム」(2007)をAmazonプライムビデオで視聴したのでその所感
 キングダム
サウジアラビアの石油会社、外国人居住区で自爆テロが発生した。300人以上の犠牲者の中にはFBI捜査官も含まれていた。 アメリカで同僚の悲報を受けたFBI捜査官フルーリーは首謀者がアルカイダと関係あるアブ・ハムザと推察、現地捜査を願い出る。
監督 ピーター・バーグ
主演 ジェイミー・フォックス, クリス・クーパー, ジェイミー・フォックス
上映時間: 109分
 所感  サウジアラビアの大佐役の人が良かった 両国から見て公平な目線で描かれていて良かった 銃撃戦は見ごたえがあった  </description>
    </item>
    
    <item>
      <title>Awesome Nuxt.js &#43; Typescript</title>
      <link>https://tekiomo.com/blog/2018/06/10/awesome-nuxt.js-&#43;-typescript/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/06/10/awesome-nuxt.js-&#43;-typescript/</guid>
      <description> Nuxt.js + TypeScriptを書くときに参考にさせていただい(た|ている)リポジトリ
(TODO: 都度追加)
 mika-f/crypto-faucets jsonberry/vue-typescript-examples glitchedmob/levizitting.com AndroidDagashi/androiddagashi.github.io chanlito/simple-todos CKGrafico/Frontend-Boilerplates/tree/nuxt-dev  参考の参考  nuxt-community/awesome-nuxt  </description>
    </item>
    
    <item>
      <title>tigが&#39;local&#39; is no longer supported for date-display, use the &#39;date-local&#39; column optionというワーニングを吐くようになってしまった</title>
      <link>https://tekiomo.com/blog/2018/05/07/tig%E3%81%8Clocal-is-no-longer-supported-for-date-display-use-the-date-local-column-option%E3%81%A8%E3%81%84%E3%81%86%E3%83%AF%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%82%92%E5%90%90%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/05/07/tig%E3%81%8Clocal-is-no-longer-supported-for-date-display-use-the-date-local-column-option%E3%81%A8%E3%81%84%E3%81%86%E3%83%AF%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%82%92%E5%90%90%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</guid>
      <description>tig終了時にtig warning: ~/.tigrc:10: &#39;local&#39; is no longer supported for date-display, use the &#39;date-local&#39; column optionというワーニングを吐くようになってしまった。
該当箇所はこんな感じ
set main-view = id:yes date:local author:full commit-title:graph=yes,refs=yes  どうやら手元のtigがアップデートされlocalは値の指定が必須になったらしい。
- set main-view = id:yes date:local author:full commit-title:graph=yes,refs=yes + set main-view = id:yes date:local=yes author:full commit-title:graph=yes,refs=yes  https://github.com/jonas/tig/blob/master/tigrc
ワーニングが出なくなった。</description>
    </item>
    
    <item>
      <title>邦画「ミュージアム」(2016)をAmazonプライムビデオで見た</title>
      <link>https://tekiomo.com/blog/2018/05/04/%E9%82%A6%E7%94%BB%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%A02016%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/05/04/%E9%82%A6%E7%94%BB%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%A02016%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</guid>
      <description>  邦画「ミュージアム」(2016)をAmazonプライムビデオで視聴したのでその所感
 ミュージアム
雨の日だけに発生する猟奇殺人事件。死体を見せることにこだわる犯人・カエル男は、自分をアーティストと呼び、犯行現場には必ず謎のメモを残す。連続する事件の関連性に気付いた刑事・沢村と部下の西野が、捜査を進めると、驚愕の次のターゲットが浮かび上がる。カエル男の罠にはまり、逆に追い詰められていく沢村。謎の“私刑”執行アーティスト・カエル男は一体誰なのか？その本当の目的とは？そして、沢村が絶望の密室（ミュージアム）で見たものとは…！？あなたは最悪のラストを期待する。※本編終了後特典映像あり Rating G &amp;copy; 円亮介/講談社 &amp;copy; 2016映画「ミュージアム」製作委員会
主演: 小栗旬, 尾野真千子, 野村周平
上映時間: 2時間, 19分
 所感  カエルの人が強い グロい 雨の日が多い  </description>
    </item>
    
    <item>
      <title>削除できずに残り続けるGNOME拡張を消せた</title>
      <link>https://tekiomo.com/blog/2018/05/03/%E5%89%8A%E9%99%A4%E3%81%A7%E3%81%8D%E3%81%9A%E3%81%AB%E6%AE%8B%E3%82%8A%E7%B6%9A%E3%81%91%E3%82%8Bgnome%E6%8B%A1%E5%BC%B5%E3%82%92%E6%B6%88%E3%81%9B%E3%81%9F/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/05/03/%E5%89%8A%E9%99%A4%E3%81%A7%E3%81%8D%E3%81%9A%E3%81%AB%E6%AE%8B%E3%82%8A%E7%B6%9A%E3%81%91%E3%82%8Bgnome%E6%8B%A1%E5%BC%B5%E3%82%92%E6%B6%88%E3%81%9B%E3%81%9F/</guid>
      <description>GNOMEの拡張を削除するにはOSがデフォルトの状態の場合、Firefoxで Installed Extensions - GNOME Shell Extensions のページで削除できる。
各拡張ごとにある❌ボタンをクリックすれば削除できるのだが、削除できるのは$HOME/.local/share/gnome-shell/extensions/以下にインストールされた拡張のみである。
ページに表示される拡張は上記のディレクトリにあるものの他に/usr/share/gnome-shell/extensions以下にある拡張も対象なのだが、後者は❌ボタンをクリックしても削除できずに残り続ける。
そのため直接rmで削除した。
sudo rm /usr/share/gnome-shell/extensions/EXTENSION_NAME 今のところ問題はなさそう。</description>
    </item>
    
    <item>
      <title>映画「オブビリオン」(2013)をAmazonプライムビデオで見た</title>
      <link>https://tekiomo.com/blog/2018/05/03/%E6%98%A0%E7%94%BB%E3%82%AA%E3%83%96%E3%83%93%E3%83%AA%E3%82%AA%E3%83%B32013%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/05/03/%E6%98%A0%E7%94%BB%E3%82%AA%E3%83%96%E3%83%93%E3%83%AA%E3%82%AA%E3%83%B32013%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</guid>
      <description>  映画「オブビリオン」(2013)をAmazonプライムビデオで視聴したのでその所感
 オブビリオン
荒廃した地球で、無人偵察機のメンテナンスをするジャック・ハーパー（クルーズ）。数十年前、“スカヴ”と呼ばれるエイリアンの襲撃により地球は壊滅。人類は別の惑星へ移住を果たした。高度1000メートル上空に居を構え、地球の監視という職務を遂行していたジャックだったが、墜落した宇宙船で眠る美女を救出したことで、平穏な生活に変化が訪れる。美女の出現によって、ジャックは自身を取り巻く環境に疑問を抱くようになり、さらには人類の運命をその手に委ねられることになる―。
主演: トム・クルーズ
上映時間: 2時間, 4分
 所感  スカヴがプレデターぽかった  </description>
    </item>
    
    <item>
      <title>すし銚子丸のお持ち帰りメニュー「すずらん」と「さつき」のネタの違い</title>
      <link>https://tekiomo.com/blog/2018/04/18/%E3%81%99%E3%81%97%E9%8A%9A%E5%AD%90%E4%B8%B8%E3%81%AE%E3%81%8A%E6%8C%81%E3%81%A1%E5%B8%B0%E3%82%8A%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%99%E3%81%9A%E3%82%89%E3%82%93%E3%81%A8%E3%81%95%E3%81%A4%E3%81%8D%E3%81%AE%E3%83%8D%E3%82%BF%E3%81%AE%E9%81%95%E3%81%84/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/04/18/%E3%81%99%E3%81%97%E9%8A%9A%E5%AD%90%E4%B8%B8%E3%81%AE%E3%81%8A%E6%8C%81%E3%81%A1%E5%B8%B0%E3%82%8A%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%99%E3%81%9A%E3%82%89%E3%82%93%E3%81%A8%E3%81%95%E3%81%A4%E3%81%8D%E3%81%AE%E3%83%8D%E3%82%BF%E3%81%AE%E9%81%95%E3%81%84/</guid>
      <description>季節や店舗によって差があると思うので参考まで。
千葉県内の店舗に電話で問い合わせた。2018年4月8日だったはず。
   すずらん 1,980円 さつき 1,500円     大トロ    中トロ 中トロ    上赤身   ビン長マグロ ビン長マグロ   ハマチ ハマチ   サーモン サーモン   イクラ軍艦 イクラ軍艦   ウニ軍艦     ネギトロ軍艦   赤エビ     甘エビ   アオリイカ     赤イカ   赤貝     ツブ貝   たまご たまご   トロタク海苔巻き トロタク海苔巻き    </description>
    </item>
    
    <item>
      <title>PuppeteerでMoneyForwardの口座情報をCLIから更新するツールを作ってみた。さらにGASとWerckerで定期実行環境も作ってみた</title>
      <link>https://tekiomo.com/blog/2018/02/11/puppeteer%E3%81%A7moneyforward%E3%81%AE%E5%8F%A3%E5%BA%A7%E6%83%85%E5%A0%B1%E3%82%92cli%E3%81%8B%E3%82%89%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%95%E3%82%89%E3%81%ABgas%E3%81%A8wercker%E3%81%A7%E5%AE%9A%E6%9C%9F%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/02/11/puppeteer%E3%81%A7moneyforward%E3%81%AE%E5%8F%A3%E5%BA%A7%E6%83%85%E5%A0%B1%E3%82%92cli%E3%81%8B%E3%82%89%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%95%E3%82%89%E3%81%ABgas%E3%81%A8wercker%E3%81%A7%E5%AE%9A%E6%9C%9F%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>MoneyForwardに登録してあるすべての口座情報をCLIで更新できるツールを作ってみた。
mf-all-updater
TL;DR  Puppeteer便利 WerckerとGASで定期的な自動実行環境を無料で作れる  作った理由  株価や仮想通貨は変動が頻繁なので、MoneyForwardの口座情報もできるだけ最新の情報にしておきたい  株価に関しては、その日の終値を取得し、推移グラフをできるだけ正確な値にしておきたい  MoneyForwardの更新周期がいまいちよく分からない MoneyForwardは有料会員ではないので一括更新ボタンが使えない→更新ボタンを押すことすら面倒  使い方 mf-all-updater/README.mdを参照のこと
XXX たまにログインできない(すぐに再実行すると確率大)という不具合がある。そのうち直す。
自動実行 定期実行させているGASからWerckerのパイプラインに対してPOSTしているだけ。無料でこのような環境を整えられるのはありがたい。
所感 Puppeteer、Wercker、GASマジ神</description>
    </item>
    
    <item>
      <title>stylelintプラグインでdoiuseのチェック</title>
      <link>https://tekiomo.com/blog/2017/11/07/stylelint%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A7doiuse%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/11/07/stylelint%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A7doiuse%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</guid>
      <description>doiuseはCSSのスタイルが指定したブラウザでサポートしてくれるかチェックしてくれる。
doiuseはnpmでも公開されているのでnpm-scriptsなりgulpなりでチェック環境を作れるのだけれども、stylelintのプラグインであるstylelint-no-unsupported-browser-featuresを利用して、stylelintに含めることができるのでやってみた。
https://github.com/ismay/stylelint-no-unsupported-browser-features
$ npm i -D stylelint stylelint-no-unsupported-browser-features # stylelint-config-standard を使うなら $ npm i -D stylelint-config-standard ./.stylelintrcはこんな感じ
# ./.stylelintrc { &amp;#34;extends&amp;#34;: &amp;#34;stylelint-config-standard&amp;#34;, &amp;#34;plugins&amp;#34;: [ &amp;#34;stylelint-no-unsupported-browser-features&amp;#34; ], &amp;#34;rules&amp;#34;: { &amp;#34;plugin/no-unsupported-browser-features&amp;#34;: [true, { &amp;#34;browsers&amp;#34;: [&amp;#34;&amp;gt; 1% in JP&amp;#34;] }] } } 実行はこんな感じ。stylelintの実行と変わらない。
$ ./node_modules/.bin/stylelint /PATH/TO/CSS/* browsersを含めていると何故かstylelintのプロセスが終了しない。(環境は node v7.10.1, npm 5.5.1)
./browserslistに定義してあげるととりあえず動いた。
# ./browserslist &amp;gt; 1% in JP  </description>
    </item>
    
    <item>
      <title>「バスルームポーチ トラベルポーチ 旅行ポーチ フック付き 洗面用具入れ 小物整理 トラベル用品 （ライトグリーン）: シューズ＆バッグ」をAmazonで購入した</title>
      <link>https://tekiomo.com/blog/2017/10/30/%E3%83%90%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%A0%E3%83%9D%E3%83%BC%E3%83%81-%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB%E3%83%9D%E3%83%BC%E3%83%81-%E6%97%85%E8%A1%8C%E3%83%9D%E3%83%BC%E3%83%81-%E3%83%95%E3%83%83%E3%82%AF%E4%BB%98%E3%81%8D-%E6%B4%97%E9%9D%A2%E7%94%A8%E5%85%B7%E5%85%A5%E3%82%8C-%E5%B0%8F%E7%89%A9%E6%95%B4%E7%90%86-%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB%E7%94%A8%E5%93%81-%E3%83%A9%E3%82%A4%E3%83%88%E3%82%B0%E3%83%AA%E3%83%BC%E3%83%B3-%E3%82%B7%E3%83%A5%E3%83%BC%E3%82%BA%E3%83%90%E3%83%83%E3%82%B0%E3%82%92amazon%E3%81%A7%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/30/%E3%83%90%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%A0%E3%83%9D%E3%83%BC%E3%83%81-%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB%E3%83%9D%E3%83%BC%E3%83%81-%E6%97%85%E8%A1%8C%E3%83%9D%E3%83%BC%E3%83%81-%E3%83%95%E3%83%83%E3%82%AF%E4%BB%98%E3%81%8D-%E6%B4%97%E9%9D%A2%E7%94%A8%E5%85%B7%E5%85%A5%E3%82%8C-%E5%B0%8F%E7%89%A9%E6%95%B4%E7%90%86-%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB%E7%94%A8%E5%93%81-%E3%83%A9%E3%82%A4%E3%83%88%E3%82%B0%E3%83%AA%E3%83%BC%E3%83%B3-%E3%82%B7%E3%83%A5%E3%83%BC%E3%82%BA%E3%83%90%E3%83%83%E3%82%B0%E3%82%92amazon%E3%81%A7%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</guid>
      <description>Amazonでバスルームポーチ トラベルポーチ 旅行ポーチ フック付き 洗面用具入れ 小物整理 トラベル用品 （ライトグリーン）を購入したのでそのレビュー。 ちなみにタイムセール中で1,280円。
欲しかった理由  風呂・洗面所で利用する小物をまとめられそうだったため 直近で旅行に行く予定があったため  良い点 ビニールのポケットが便利 シャンプーのミニボトルが飛行中の気圧の変化で中身が飛び出してしまうことはありがちだが、ビニールのポケットであれば被害を最小限にできる。
まとめられるのは便利 ひとうのバッグにまとめられるのはやはり便利だった。
悪い点 1回使用した時点においては特になし。
総評 便利。フックが付いているのでどこかしらにひっかけられる(念の為S字フックを持って行ったが必要なかった)。
ライトグリーンにしたのは単純に目立つから。スーツケースの中でも異色を放った。</description>
    </item>
    
    <item>
      <title>GulpでHTMLに使ってはいけないクラス名が含まれていないかチェックする</title>
      <link>https://tekiomo.com/blog/2017/10/28/gulp%E3%81%A7html%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/28/gulp%E3%81%A7html%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B/</guid>
      <description>下記の例はjQueryUIが付加するようなクラス名(ui-*から始まるような)が含まれていたらエラーにする。
var gulp = require(&amp;#39;gulp&amp;#39;); var cheerio = require(&amp;#39;gulp-cheerio&amp;#39;); var through2 = require(&amp;#39;through2&amp;#39;) var gulpUtil = require(&amp;#39;gulp-util&amp;#39;) gulp.task(&amp;#39;html-validator&amp;#39;, function() { gulp.src([ &amp;#39;/PATH/TO/**/*.html&amp;#39;, ]) .pipe(cheerio({ run: function($, file) { var elements = $(&amp;#39;[class^=&amp;#34;ui-&amp;#34;], [class*=&amp;#34; ui-&amp;#34;]&amp;#39;) if (elements.length === 0) { return; } var matches = elements.attr(&amp;#39;class&amp;#39;).match(/\b(ui-[^ ]+)/g) var invalidClass = {}; for (var i in matches) { invalidClass[&amp;#39;&amp;#34;&amp;#39; + matches[i] + &amp;#39;&amp;#34;&amp;#39;] = true; } gulpUtil.log(gulpUtil.colors.red(&amp;#39;Can not use class name &amp;#39; + Object.</description>
    </item>
    
    <item>
      <title>dev_appserver.pyでつまづいた</title>
      <link>https://tekiomo.com/blog/2017/10/27/dev_appserver.py%E3%81%A7%E3%81%A4%E3%81%BE%E3%81%A5%E3%81%84%E3%81%9F/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/27/dev_appserver.py%E3%81%A7%E3%81%A4%E3%81%BE%E3%81%A5%E3%81%84%E3%81%9F/</guid>
      <description> gcloudをインストールすると、一緒にインストールされるdev_appserver.pyを使うとローカルでの開発用にサーバーを立てられる。
それを実行したときにちょっとつまづいたのでメモ
ImportError: No module named &amp;lsquo;setup&amp;rsquo; このエラーはPython2(2.7？)でないと出る模様。Python2.7などを利用することで解決できる。
google.appengine.tools.devappserver2.wsgi_server.BindError: Unable to bind localhost:8000 すでに8000番ポートを利用していると発生する。
ただし--port XXXXだけではダメで--admin-port XXXXも指定する。
# NG $ dev_appserver.py --port 8001 # OK $ dev_appserver.py --port 8001 ./app.yaml --admin_port 8002</description>
    </item>
    
    <item>
      <title>「Asltoy USB 充電 ステーション 充電 スタンド 4ポート スマホ 充電器 収納 充電 最大2.4A搭載 iPhone iPod iPad Android スマホ対応 (黒い)」をAmazonで購入した</title>
      <link>https://tekiomo.com/blog/2017/10/16/asltoy-usb-%E5%85%85%E9%9B%BB-%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E5%85%85%E9%9B%BB-%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-4%E3%83%9D%E3%83%BC%E3%83%88-%E3%82%B9%E3%83%9E%E3%83%9B-%E5%85%85%E9%9B%BB%E5%99%A8-%E5%8F%8E%E7%B4%8D-%E5%85%85%E9%9B%BB-%E6%9C%80%E5%A4%A72.4a%E6%90%AD%E8%BC%89-iphone-ipod-ipad-android-%E3%82%B9%E3%83%9E%E3%83%9B%E5%AF%BE%E5%BF%9C-%E9%BB%92%E3%81%84%E3%82%92amazon%E3%81%A7%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/16/asltoy-usb-%E5%85%85%E9%9B%BB-%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E5%85%85%E9%9B%BB-%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-4%E3%83%9D%E3%83%BC%E3%83%88-%E3%82%B9%E3%83%9E%E3%83%9B-%E5%85%85%E9%9B%BB%E5%99%A8-%E5%8F%8E%E7%B4%8D-%E5%85%85%E9%9B%BB-%E6%9C%80%E5%A4%A72.4a%E6%90%AD%E8%BC%89-iphone-ipod-ipad-android-%E3%82%B9%E3%83%9E%E3%83%9B%E5%AF%BE%E5%BF%9C-%E9%BB%92%E3%81%84%E3%82%92amazon%E3%81%A7%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</guid>
      <description>AmazonでAsltoy USB 充電 ステーション 充電 スタンド 4ポート スマホ 充電器 収納 充電 最大2.4A搭載 iPhone iPod iPad Android スマホ対応 (黒い)を購入したのでそのレビュー。
ちなみに1,799円、ポイントで購入した。
欲しかった理由  iPhone(3GS, 4S)の付属品だった充電器が利用できなくなった 充電したい端末が多く電源周りがごちゃごちゃしてきたので充電ステーションに興味があった  良い点 スマホを立てるためのしきいが本体とつながっている この手の商品は取り外しのきく板でしきられていることが多い。取り外しができると壊れそう、失くしそうなので、つながっているものが欲しかった。購入に至った決め手。
安い その他の4ポートタイプの充電器は安くても2,000円台だった。
悪い点 高周波が発生する(2018/05/21追記) 充電中にキーンという高い音が発生している(いわゆるコイル鳴き)。充電する端末による模様。
静かな部屋では気になるレベルかも知れない。
発生する  iPhone4S発生  発生しない  HUAWEI P8 lite Amazon Fire HD 8  総評 電源周りがすっきりした。これは買ってよかった。</description>
    </item>
    
    <item>
      <title>「KKaMM ノートパソコンスタンド パソコンデスク PCスタンド 折りたたみ式 姿勢角度調整可」をAmazon購入した</title>
      <link>https://tekiomo.com/blog/2017/10/15/kkamm-%E3%83%8E%E3%83%BC%E3%83%88%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%83%87%E3%82%B9%E3%82%AF-pc%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-%E6%8A%98%E3%82%8A%E3%81%9F%E3%81%9F%E3%81%BF%E5%BC%8F-%E5%A7%BF%E5%8B%A2%E8%A7%92%E5%BA%A6%E8%AA%BF%E6%95%B4%E5%8F%AF%E3%82%92amazon%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/15/kkamm-%E3%83%8E%E3%83%BC%E3%83%88%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%83%87%E3%82%B9%E3%82%AF-pc%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89-%E6%8A%98%E3%82%8A%E3%81%9F%E3%81%9F%E3%81%BF%E5%BC%8F-%E5%A7%BF%E5%8B%A2%E8%A7%92%E5%BA%A6%E8%AA%BF%E6%95%B4%E5%8F%AF%E3%82%92amazon%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F/</guid>
      <description>AmazonでKKaMM ノートパソコンスタンド パソコンデスク PCスタンド 折りたたみ式 姿勢角度調整可を購入したのでそのレビュー。
ちなみに2,980円、ポイントで購入した。
欲しかった理由 ベッドで寝ながらパソコンしたかった。
良い点 収納しやすい 脚が折りたためる。
それなりに適切な高さ、角度を設定できる 15度刻みで角度を調節ができる。
悪い点 手首に天板が当たる。痛い＆冷たい パソコンを支えるため金属の天板下部分がL字型になっている。寝ながら利用する場合、このL字部分がちょうど手首に当たり痛い。冷たい。
すべりやすい、ぐらつきく 寝ながら利用する場合、ベッドの上は特にすべりやすく、また安定性も悪いため、スタンドの脚を両腕・ひじで抑えるように利用しなければならない。
その他 マウス台の位置が微妙 寝ながら利用する場合、マウス台がノートパソコンの位置から遠い、腕の位置からみると近すぎる。個人的にはマウスパッド派なのでどちらでもいい。
総評 寝ながら利用する用途は一応達成できる。3,000円程度ならばこんなもんか。</description>
    </item>
    
    <item>
      <title>映画「海難１８９０」(2015)をAmazonプライムビデオで見た</title>
      <link>https://tekiomo.com/blog/2017/10/15/%E6%98%A0%E7%94%BB%E6%B5%B7%E9%9B%A3%EF%BC%91%EF%BC%98%EF%BC%99%EF%BC%902015%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/15/%E6%98%A0%E7%94%BB%E6%B5%B7%E9%9B%A3%EF%BC%91%EF%BC%98%EF%BC%99%EF%BC%902015%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</guid>
      <description>  映画「海難１８９０」(2015)をAmazonプライムビデオで視聴したのでその所感
 海難１８９０
1890年、和歌山県串本町沖。後のトルコであるオスマン帝国の親善使節団を乗せた軍艦エルトゥールル号が座礁して大破、海に投げ出された乗組員500名以上が暴風雨で命を落とす。そうした過酷な状況下で、元紀州藩士の医師・田村元貞（内野聖陽）やその助手を務めるハル（忽那汐里）ら、地元住民が懸命の救援活動に乗り出す。それから時を経たイラン・イラク戦争中の1985年、日本政府は危機的状況を理由にテヘラン在留邦人の救出を断念。そんな中、トルコ政府は彼らのためにある行動を取る&amp;copy;2015 Ertugrul Film Partners
主演: 内野　聖陽, ケナン・エジェ, 忽那　汐里
上映時間: 2時間, 11分
 所感  台風危険 焦り禁物 法整備大事  </description>
    </item>
    
    <item>
      <title>邦画「殿、利息でござる！」(2016)をAmazonプライムビデオで見た</title>
      <link>https://tekiomo.com/blog/2017/10/15/%E9%82%A6%E7%94%BB%E6%AE%BF%E5%88%A9%E6%81%AF%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B2016%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/15/%E9%82%A6%E7%94%BB%E6%AE%BF%E5%88%A9%E6%81%AF%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B2016%E3%82%92amazon%E3%83%97%E3%83%A9%E3%82%A4%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E3%81%A7%E8%A6%8B%E3%81%9F/</guid>
      <description>  邦画「殿、利息でござる！」(2016)をAmazonプライムビデオで視聴したのでその所感
 殿、利息でござる！
金欠のため、百姓や町人へ容赦なく重税を課していた仙台藩。中でもさびれ果てた小さな宿場町・吉岡宿では、破産と夜逃げが相次いでいた。町の将来を心配する十三郎は、知恵者の篤平治から宿場復興の秘策を打ち明けられる。それは、藩に大金を貸し付け利息を巻き上げるという、百姓が搾取される側から搾取する側に回る逆転の発想であった。計画が明るみに出れば打ち首確実。必要な資金は千両。現在の3億円という大金を水面下で集める、前代未聞の頭脳戦が始まった。&amp;copy;2016「殿、利息でござる！」製作委員会
主演: 阿部サダヲ, 瑛太, 妻夫木聡
上映時間: 2時間, 9分
 所感  見る前はあまり期待していなかった タイトル的にコメディかと思ったらそうでもなかった 俳優陣が豪華 ベーシックインカム  </description>
    </item>
    
    <item>
      <title>FirefoxとChromeのCSP違反時の報告内容を調べてみた</title>
      <link>https://tekiomo.com/blog/2017/10/11/firefox%E3%81%A8chrome%E3%81%AEcsp%E9%81%95%E5%8F%8D%E6%99%82%E3%81%AE%E5%A0%B1%E5%91%8A%E5%86%85%E5%AE%B9%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/11/firefox%E3%81%A8chrome%E3%81%AEcsp%E9%81%95%E5%8F%8D%E6%99%82%E3%81%AE%E5%A0%B1%E5%91%8A%E5%86%85%E5%AE%B9%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>内容がChromeの方が多かったり、同じキーでも値が異なっていたり。
ちなみにIE11はCSPに対応していないので調べていない。
Firefox 56 Request Header Host: localhost User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Length: 413 Content-Type: application/csp-report Connection: keep-alive  Request Body { &amp;#34;csp-report&amp;#34;: { &amp;#34;blocked-uri&amp;#34;: &amp;#34;https://avatars2.githubusercontent.com&amp;#34;, &amp;#34;document-uri&amp;#34;: &amp;#34;http://localhost/&amp;#34;, &amp;#34;original-policy&amp;#34;: &amp;#34;default-src http://localhost; script-src http://localhost unsafe-inline unsafe-eval; img-src http://localhost; style-src http://localhost unsafe-inline; child-src none; object-src none; report-uri http://localhost/&amp;#34;, &amp;#34;referrer&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;violated-directive&amp;#34;: &amp;#34;img-src http://localhost&amp;#34; } } Chrome 61.0.3163.100 Request Header Accept:*/* Accept-Encoding:gzip, deflate, br Accept-Language:ja-JP,ja;q=0.</description>
    </item>
    
    <item>
      <title>GNOME Vagrant Indicatorが便利</title>
      <link>https://tekiomo.com/blog/2017/10/09/gnome-vagrant-indicator%E3%81%8C%E4%BE%BF%E5%88%A9/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/09/gnome-vagrant-indicator%E3%81%8C%E4%BE%BF%E5%88%A9/</guid>
      <description>GNOME Vagrant Indicator - GNOME Shell Extensions
端末内のVagrantに対してup, halt, sshなどが簡単に実行できる。
起動中のVagrantの確認にも利用できるので便利。</description>
    </item>
    
    <item>
      <title>GitHub PagesでCSSフレームワークBulmaをカスタマイズして使ってみる</title>
      <link>https://tekiomo.com/blog/2017/10/07/github-pages%E3%81%A7css%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFbulma%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/07/github-pages%E3%81%A7css%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFbulma%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/</guid>
      <description> GitHub PagesのリポジトリでCSSフレームワークBulmaをSASSを利用してカスタマイズしたときのメモ
1. submoduleにjgthms/bulmaを追加 もし_config.ymlでsass.sass_dir(デフォルトは _sass)を独自に指定していたらそのディレクトリを指定する
$ git submodule add https://github.com/jgthms/bulma _sass/bulma 2. style.scssを作成 Customizing with Sassの「Customizing with Sass」を参考。importのパスだけ注意(sass.sass_dirから見たパスにする)。
--- --- @import &amp;#34;bulma/sass/utilities/initial-variables&amp;#34;; $blue: #3498db; $red: #e74c3c; $green: #18bc9c; $yellow: #f39c12; $primary: #2c3e50; $dark-primary: #1a242f; $link: $blue; @import &amp;#34;bulma/bulma&amp;#34;;</description>
    </item>
    
    <item>
      <title>jekyll-coffeescriptで unexpected - エラーをある程度解決する</title>
      <link>https://tekiomo.com/blog/2017/10/07/jekyll-coffeescript%E3%81%A7-unexpected-%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E3%81%82%E3%82%8B%E7%A8%8B%E5%BA%A6%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/07/jekyll-coffeescript%E3%81%A7-unexpected-%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E3%81%82%E3%82%8B%E7%A8%8B%E5%BA%A6%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/</guid>
      <description>GitHub Pagesでjekyll-coffeescriptプラグインを利用すると、デプロイ時に*.coffeeを.jsに変換してくれる。
しかし、jekyll-coffeescriptの記法として、各coffeeファイルの先頭には
--- ---  を書く必要がある。
これがcoffeelin時に
✗ #1: [stdin]:1:3: error: unexpected -  のようなエラーになるのでどうにか解決したい。
とりあえずの解決方法 コンパイル対象のcoffeeファイルだけ目をつぶって、それ以外のファイルに影響を及ぼさないようにする。
まず、coffeelintの対象となるメインのcoffeeファイルを./_include以下に置く。
今回は、 ./include/coffeescript/main.coffeeとした。これにじっくりとcoffeeのソースを書く。
そしてHTMLから読み込まれるcoffeeファイルを./site.coffeeとして下記の内容にする。
--- --- {% raw %} {% include coffeescript/main.coffee %} {% endraw %}  もっといい解決方法はないかな&amp;hellip;。</description>
    </item>
    
    <item>
      <title>GulpでCSSファイルのセレクタのHTMLタグ名をclass名に置き換える</title>
      <link>https://tekiomo.com/blog/2017/10/05/gulp%E3%81%A7css%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AEhtml%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92class%E5%90%8D%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/05/gulp%E3%81%A7css%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AEhtml%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92class%E5%90%8D%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</guid>
      <description>独自タグfooをclass.fooに置き換えたかったので、through2を使って書いてみた
var gulp = require(&amp;#39;gulp&amp;#39;); var css = require(&amp;#39;css&amp;#39;) var through2 = require(&amp;#39;through2&amp;#39;) gulp.task(&amp;#39;imagemin&amp;#39;, function(){ return gulp.src([&amp;#39;/PATH/TO/CSSFILE&amp;#39;]) .pipe(through2.obj(function (file, enc, callback) { var re = new RegExp(&amp;#39;(^|\\s+)([a-z]+(?=(?:\\s+|:|\\.|\\s*(?:$|,))))&amp;#39;, &amp;#39;g&amp;#39;) var parsed = css.parse(file.contents.toString(&amp;#39;utf8&amp;#39;)) for (var i in parsed.stylesheet.rules) { for (var j in parsed.stylesheet.rules[i].selectors) { parsed.stylesheet.rules[i].selectors[j] = parsed.stylesheet.rules[i].selectors[j].replace(re, &amp;#39;$1.$2&amp;#39;) } } // 圧縮するなら  // file.contents = new Buffer(css.stringify(parsed, {compress: true}))  this.push(file) callback() })) .pipe(gulp.dest(&amp;#39;/PATH/TO/DEST&amp;#39;)) }); </description>
    </item>
    
    <item>
      <title>コンテンツが少なくてもフッターをブラウザの下に配置する</title>
      <link>https://tekiomo.com/blog/2017/10/01/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%8C%E5%B0%91%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%AE%E4%B8%8B%E3%81%AB%E9%85%8D%E7%BD%AE%E3%81%99%E3%82%8B/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/01/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%8C%E5%B0%91%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%AE%E4%B8%8B%E3%81%AB%E9%85%8D%E7%BD%AE%E3%81%99%E3%82%8B/</guid>
      <description>コンテンツが少なくてフッターの下に空白ができてしまうときの対処。
ヘッダーとフッターの高さが固定されているときにしか利用できないけれども。
HTMLはこんな感じを想定
&amp;lt;header&amp;gt; ヘッダー &amp;lt;/header&amp;gt; &amp;lt;div id=&amp;#34;main&amp;#34;&amp;gt; コンテンツ &amp;lt;/div&amp;gt; &amp;lt;footer&amp;gt; ヘッダー &amp;lt;/footer&amp;gt; #mainのheightをmin-heightとcalc()で指定する。
header { height: 50px; } #main { min-height: calc(100vh - 50px - 50px); } footer { height: 50px; }</description>
    </item>
    
    <item>
      <title>JasmineでUserAgentを偽装する</title>
      <link>https://tekiomo.com/blog/2017/09/30/jasmine%E3%81%A7useragent%E3%82%92%E5%81%BD%E8%A3%85%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/09/30/jasmine%E3%81%A7useragent%E3%82%92%E5%81%BD%E8%A3%85%E3%81%99%E3%82%8B/</guid>
      <description>spyOnProperty()を利用する。
下記はiPadに偽装する例。
spyOnProperty(window.navigator, &amp;#39;userAgent&amp;#39;) .and.returnValue(&amp;#39;Mozilla/5.0 (iPad; CPU OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.0 Mobile/14F91 Safari/602.1&amp;#39;) </description>
    </item>
    
    <item>
      <title>ベトナム中部都市ダナン・ホイアン旅行tips</title>
      <link>https://tekiomo.com/blog/2017/09/12/%E3%83%99%E3%83%88%E3%83%8A%E3%83%A0%E4%B8%AD%E9%83%A8%E9%83%BD%E5%B8%82%E3%83%80%E3%83%8A%E3%83%B3%E3%83%9B%E3%82%A4%E3%82%A2%E3%83%B3%E6%97%85%E8%A1%8Ctips/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/09/12/%E3%83%99%E3%83%88%E3%83%8A%E3%83%A0%E4%B8%AD%E9%83%A8%E9%83%BD%E5%B8%82%E3%83%80%E3%83%8A%E3%83%B3%E3%83%9B%E3%82%A4%E3%82%A2%E3%83%B3%E6%97%85%E8%A1%8Ctips/</guid>
      <description>ダナン・ホイアンの旅行中、ちょっとだけ得する情報を書き連ねる。
SIMカード スマホで地図を見たりや検索ができたりすると便利なので手に入れておいて損はないはず。 * データ通信SIM * 5 USD * 4G * 利用可能な期間は7日間、帯域制限なし * 国際線ターミナル空港内の荷物受け取りのターンテーブル前の売店で売っている 以前は出口を出た広場の屋台で売っていたが、今回はなかった(2017&amp;frasl;09)。空港内だと高いイメージがあるかも知れないが、2016/09では3G 30日間 6 USDだったのでむしろ安い
入国 ダナン空港 入国審査はゲートごとにASEAN, Foreign, Vietnumなどあたかもそれらに該当する国籍の人しか通れないかのような表示があるが、これらはいずれも日本人旅行客なら通過できていた(私はASEANのゲートを利用した。日本人がVietnumのゲートを通過したのを見た)
出国 ダナン空港  開封済みのペットボトルでも機内に持ち込めた  ハノイ空港  国内線(ターミナル1)から国際線(ターミナル2)への移動は無料のシャトルバス  とりあえず出口から外に出ると目の前にバス停が並んでいる シャトルバスの乗り場はターミナル1方向(おそらく出口を出て右側)の端の方。T2とかTerminal2などと書かかれている看板を目指す 日本の路線バスと同じくらいの大きさの黒いバスに乗る 国際線ターミナルに着いたら、入口に入って右奥に出国審査のゲートがある  基本的にUSD表記だが、VNDも利用できる  両替  土曜日と日曜日は銀行系の両替は利用できない。宿泊したホテルがそれに該当した 民間の両替所は日曜日でも両替できた ホイアンは少しだけレートが悪い  ダナン ジュエリーショップ(金を売っている店) 1円 = 209 VND ホテル 1円 = 199 VND ホイアン 民間両替所 1円 = 206 VND   ホテル チップ  ベッドメイキングにだけチップを払った(1ドル札を2,000円分くらいは持っていると何かと便利)  ビーチ ノンヌォックビーチ  ダナン市街・ホイアン市街から車で30, 40分ほど 人が少ない。ホテル宿泊客がほとんど  おそらくプライベートビーチではないと思うが近辺は居住地が他のビーチよりも少ない・市街地からアクセスが悪いため人が少ない  海の透明度の高さはダナン〜ホイアンでNo.</description>
    </item>
    
    <item>
      <title>不要になったDockerのブリッジネットワークを削除する</title>
      <link>https://tekiomo.com/blog/2017/07/12/%E4%B8%8D%E8%A6%81%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9Fdocker%E3%81%AE%E3%83%96%E3%83%AA%E3%83%83%E3%82%B8%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/07/12/%E4%B8%8D%E8%A6%81%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9Fdocker%E3%81%AE%E3%83%96%E3%83%AA%E3%83%83%E3%82%B8%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</guid>
      <description>$ docker network rm \  $(docker network ls \  | sed 1d \  | cut --delimiter=&amp;#39; &amp;#39; --fields=1) あんまりよくわかっていない。
削除できないものは
Error response from daemon: bridge is a pre-defined network and cannot be removed  とかでエラーになるので多分大丈夫なはず。</description>
    </item>
    
    <item>
      <title>docker-composeでDjangoの開発環境をサクッと作成する</title>
      <link>https://tekiomo.com/blog/2017/05/29/docker-compose%E3%81%A7django%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E3%82%B5%E3%82%AF%E3%83%83%E3%81%A8%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/05/29/docker-compose%E3%81%A7django%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E3%82%B5%E3%82%AF%E3%83%83%E3%81%A8%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>Dockerだけで作りたかったのだけれども、volumeを前提としてdocker build時にmigrateしても、docker runするとmigrateしたファイルがいっさいがっさいなくなってしまうのでdocker-composeで作った。
ファイル構成は以下のような作りを想定。
. ./app ./manage.py ./requirements/develop.txt ./Dockerfile ./docker-compose.yml  ./docker-compose.ymlはこんな感じ。
version: &amp;#39;2&amp;#39; services: web: build: . command: python apps/manage.py runserver 0.0.0.0:8000 --insecure volumes: - .:/code ports: - &amp;#34;8000:8000&amp;#34; ./Dockerfileはこんな感じ。/codeのディレクトリ名は適当に。
FROM python:3.5 ENV PYTHONUNBUFFERED 1 VOLUME /code WORKDIR /code ADD . /code RUN pip install -r requirements/development.txt \ &amp;amp;&amp;amp; python3 manage.py migrate  初回build後にcreatesuperuserで管理画面ユーザーを作成する。必要なければ省ける。
$ docker-compose build $ docker-compose run web python3 ./manage.py createsuperuser $ docker-compose up</description>
    </item>
    
    <item>
      <title>任意のディレクトリにgem installする</title>
      <link>https://tekiomo.com/blog/2017/05/10/%E4%BB%BB%E6%84%8F%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%ABgem-install%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/05/10/%E4%BB%BB%E6%84%8F%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%ABgem-install%E3%81%99%E3%82%8B/</guid>
      <description>GEM_HOMEでインストール先を指定できる。
$ export GEM_HOME=${HOME}/lib/gems $ export PATH=${GEM_HOME}/bin/:${PATH} $ gem install fakes3</description>
    </item>
    
    <item>
      <title>Chromeにインストールした拡張機能をVivaldiで無理矢理利用する</title>
      <link>https://tekiomo.com/blog/2017/05/01/chrome%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%82%92vivaldi%E3%81%A7%E7%84%A1%E7%90%86%E7%9F%A2%E7%90%86%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/05/01/chrome%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%82%92vivaldi%E3%81%A7%E7%84%A1%E7%90%86%E7%9F%A2%E7%90%86%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid>
      <description>Ubuntuで試した。
VivaldiはChromiumベースということで、Chromeウェブストアで配布されている拡張機能を利用できる。
試しに、
 すでに存在している.config/google-chromeを.config/vivaldiにリネーム Vivaldiを起動  すると、VivaldiでもChromeでインストールしていた拡張機能が有効になっており利用することができた。
ただし、Googleアカウント自体の同期ができるわけではない。
ブックマークはVivaldiの初回起動時には存在するものの、再起動したら消えた。無に帰した。</description>
    </item>
    
    <item>
      <title>Ubuntu, MacでWindows IEの動作を確認する</title>
      <link>https://tekiomo.com/blog/2017/05/01/ubuntu-mac%E3%81%A7windows-ie%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/05/01/ubuntu-mac%E3%81%A7windows-ie%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/</guid>
      <description>Microsoftが提供しているOVAイメージを利用する。

zip形式で配布されているのでunzipして開くだけ。</description>
    </item>
    
    <item>
      <title>GitHub PagesのリポジトリをDockerで動かす</title>
      <link>https://tekiomo.com/blog/2017/04/19/github-pages%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92docker%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/04/19/github-pages%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92docker%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99/</guid>
      <description>madduci/docker-github-pagesでできる。
GitHub Pagesのリポジトリがあるディレクトリ内で↓を実行する。
$ docker run --rm -it -p 4000:4000 \  -v &amp;#34;${PWD}&amp;#34;:/site madduci/docker-github-pages serve \  --watch --force_polling --host 0.0.0.0 追記 タイムゾーンを東京にする場合は-eでタイムゾーン情報を渡す。
docker run -e &amp;#34;TZ=Asia/Tokyo&amp;#34; --rm .</description>
    </item>
    
  </channel>
</rss>