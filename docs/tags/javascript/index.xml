<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on テキオモの部屋</title>
    <link>https://tekiomo.com/tags/javascript/</link>
    <description>Recent content in JavaScript on テキオモの部屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Feb 2018 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://tekiomo.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PuppeteerでMoneyForwardの口座情報をCLIから更新するツールを作ってみた。さらにGASとWerckerで定期実行環境も作ってみた</title>
      <link>https://tekiomo.com/blog/2018/02/11/puppeteer%E3%81%A7moneyforward%E3%81%AE%E5%8F%A3%E5%BA%A7%E6%83%85%E5%A0%B1%E3%82%92cli%E3%81%8B%E3%82%89%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%95%E3%82%89%E3%81%ABgas%E3%81%A8wercker%E3%81%A7%E5%AE%9A%E6%9C%9F%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2018/02/11/puppeteer%E3%81%A7moneyforward%E3%81%AE%E5%8F%A3%E5%BA%A7%E6%83%85%E5%A0%B1%E3%82%92cli%E3%81%8B%E3%82%89%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%95%E3%82%89%E3%81%ABgas%E3%81%A8wercker%E3%81%A7%E5%AE%9A%E6%9C%9F%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>MoneyForwardに登録してあるすべての口座情報をCLIで更新できるツールを作ってみた。
mf-all-updater
TL;DR  Puppeteer便利 WerckerとGASで定期的な自動実行環境を無料で作れる  作った理由  株価や仮想通貨は変動が頻繁なので、MoneyForwardの口座情報もできるだけ最新の情報にしておきたい  株価に関しては、その日の終値を取得し、推移グラフをできるだけ正確な値にしておきたい  MoneyForwardの更新周期がいまいちよく分からない MoneyForwardは有料会員ではないので一括更新ボタンが使えない→更新ボタンを押すことすら面倒  使い方 mf-all-updater/README.mdを参照のこと
XXX たまにログインできない(すぐに再実行すると確率大)という不具合がある。そのうち直す。
自動実行 定期実行させているGASからWerckerのパイプラインに対してPOSTしているだけ。無料でこのような環境を整えられるのはありがたい。
所感 Puppeteer、Wercker、GASマジ神</description>
    </item>
    
    <item>
      <title>GulpでHTMLに使ってはいけないクラス名が含まれていないかチェックする</title>
      <link>https://tekiomo.com/blog/2017/10/28/gulp%E3%81%A7html%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/28/gulp%E3%81%A7html%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B/</guid>
      <description>下記の例はjQueryUIが付加するようなクラス名(ui-*から始まるような)が含まれていたらエラーにする。
var gulp = require(&amp;#39;gulp&amp;#39;); var cheerio = require(&amp;#39;gulp-cheerio&amp;#39;); var through2 = require(&amp;#39;through2&amp;#39;) var gulpUtil = require(&amp;#39;gulp-util&amp;#39;) gulp.task(&amp;#39;html-validator&amp;#39;, function() { gulp.src([ &amp;#39;/PATH/TO/**/*.html&amp;#39;, ]) .pipe(cheerio({ run: function($, file) { var elements = $(&amp;#39;[class^=&amp;#34;ui-&amp;#34;], [class*=&amp;#34; ui-&amp;#34;]&amp;#39;) if (elements.length === 0) { return; } var matches = elements.attr(&amp;#39;class&amp;#39;).match(/\b(ui-[^ ]+)/g) var invalidClass = {}; for (var i in matches) { invalidClass[&amp;#39;&amp;#34;&amp;#39; + matches[i] + &amp;#39;&amp;#34;&amp;#39;] = true; } gulpUtil.log(gulpUtil.colors.red(&amp;#39;Can not use class name &amp;#39; + Object.</description>
    </item>
    
    <item>
      <title>GulpでCSSファイルのセレクタのHTMLタグ名をclass名に置き換える</title>
      <link>https://tekiomo.com/blog/2017/10/05/gulp%E3%81%A7css%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AEhtml%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92class%E5%90%8D%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/10/05/gulp%E3%81%A7css%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AEhtml%E3%82%BF%E3%82%B0%E5%90%8D%E3%82%92class%E5%90%8D%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</guid>
      <description>独自タグfooをclass.fooに置き換えたかったので、through2を使って書いてみた
var gulp = require(&amp;#39;gulp&amp;#39;); var css = require(&amp;#39;css&amp;#39;) var through2 = require(&amp;#39;through2&amp;#39;) gulp.task(&amp;#39;imagemin&amp;#39;, function(){ return gulp.src([&amp;#39;/PATH/TO/CSSFILE&amp;#39;]) .pipe(through2.obj(function (file, enc, callback) { var re = new RegExp(&amp;#39;(^|\\s+)([a-z]+(?=(?:\\s+|:|\\.|\\s*(?:$|,))))&amp;#39;, &amp;#39;g&amp;#39;) var parsed = css.parse(file.contents.toString(&amp;#39;utf8&amp;#39;)) for (var i in parsed.stylesheet.rules) { for (var j in parsed.stylesheet.rules[i].selectors) { parsed.stylesheet.rules[i].selectors[j] = parsed.stylesheet.rules[i].selectors[j].replace(re, &amp;#39;$1.$2&amp;#39;) } } // 圧縮するなら  // file.contents = new Buffer(css.stringify(parsed, {compress: true}))  this.push(file) callback() })) .pipe(gulp.dest(&amp;#39;/PATH/TO/DEST&amp;#39;)) }); </description>
    </item>
    
    <item>
      <title>JasmineでUserAgentを偽装する</title>
      <link>https://tekiomo.com/blog/2017/09/30/jasmine%E3%81%A7useragent%E3%82%92%E5%81%BD%E8%A3%85%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://tekiomo.com/blog/2017/09/30/jasmine%E3%81%A7useragent%E3%82%92%E5%81%BD%E8%A3%85%E3%81%99%E3%82%8B/</guid>
      <description>spyOnProperty()を利用する。
下記はiPadに偽装する例。
spyOnProperty(window.navigator, &amp;#39;userAgent&amp;#39;) .and.returnValue(&amp;#39;Mozilla/5.0 (iPad; CPU OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.0 Mobile/14F91 Safari/602.1&amp;#39;) </description>
    </item>
    
  </channel>
</rss>